// xAI Grok integration - based on blueprint:javascript_xai
import OpenAI from "openai";

const openai = new OpenAI({
  baseURL: "https://api.x.ai/v1",
  apiKey: process.env.XAI_API_KEY,
});

const BUDGET_RANGES: { [key: string]: string } = {
  under25: "under $25",
  "25to50": "$25 to $50",
  "50to100": "$50 to $100",
  over100: "over $100",
};

export interface ProductSuggestion {
  id: string;
  name: string;
  price: string;
  description: string;
}

export async function getProductSuggestions(
  recipient: string,
  budget: string,
): Promise<ProductSuggestion[]> {
  const budgetRange = BUDGET_RANGES[budget] || "any price";
  
  try {
    const response = await openai.chat.completions.create({
      model: "grok-4-fast",
      messages: [
        {
          role: "system",
          content: "You are a product recommendation assistant. Provide exactly 3 different gift product suggestions. Format each as: NAME|PRICE|DESCRIPTION on separate lines.",
        },
        {
          role: "user",
          content: `Suggest 3 different specific gift products for a ${recipient} at Target with a budget of ${budgetRange}.

REQUIREMENTS:
- Each product must be within ${budgetRange}
- Provide variety (different categories)
- Format: ProductName|$XX.XX|Brief description (one sentence)
- One product per line
- No numbering or extra text

Example format:
Cozy Throw Blanket|$24.99|Soft fleece blanket perfect for relaxing
Wireless Earbuds|$49.99|High-quality sound for music lovers
Coffee Maker|$39.99|Brews perfect coffee every morning`,
        },
      ],
      max_tokens: 250,
      temperature: 0.8,
    });

    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("No suggestions generated");
    }

    const lines = content.trim().split("\n").filter(line => line.includes("|"));
    const products: ProductSuggestion[] = [];

    for (let i = 0; i < Math.min(3, lines.length); i++) {
      const parts = lines[i].split("|").map(s => s.trim());
      if (parts.length >= 3) {
        products.push({
          id: `product-${i + 1}`,
          name: parts[0],
          price: parts[1],
          description: parts[2],
        });
      }
    }

    if (products.length === 0) {
      throw new Error("Failed to parse product suggestions");
    }

    return products;
  } catch (error) {
    console.error("Grok API error:", error);
    throw new Error("Failed to generate product suggestions");
  }
}

export async function generateGiftRecommendation(
  recipient: string,
  budget: string,
  productName: string,
  productPrice: string,
): Promise<string> {
  const budgetRange = BUDGET_RANGES[budget] || "any price";
  try {
    const response = await openai.chat.completions.create({
      model: "grok-4-fast",
      messages: [
        {
          role: "system",
          content:
            "You are a gift recommendation assistant. You NEVER use hashtags. You ALWAYS include the Target gift ideas link. Follow instructions exactly.",
        },
        {
          role: "user",
          content: `Generate a shareable social media post about using Target's AI Gift Helper to find a gift for ${recipient}.

Product found: ${productName}

STRICT RULES - DO NOT BREAK:
1. DO NOT use ANY hashtags (no # symbols anywhere)
2. DO NOT include any prices or dollar amounts
3. Start with "I used Target's AI Gift Helper and saved my holiday shopping!"
4. Mention the product: ${productName}
5. Include "use code Target2025 for 10% off"
6. MUST end with: https://x.com/dhiribarne/status/1973422639323738308
7. DO NOT include any Target.com links except the X post link
8. Keep it under 280 characters total
9. Write in first person, exciting and shareable

Format example: "I used Target's AI Gift Helper and saved my holiday shopping! It nailed the perfect gift for [recipient]: ${productName}. Try it yourselfâ€”use code Target2025 for 10% off, select yours here: https://x.com/dhiribarne/status/1973422639323738308"

Generate now without hashtags or prices:`,
        },
      ],
      max_tokens: 150,
      temperature: 0.7,
    });

    const content = response.choices[0].message.content;

    if (!content) {
      throw new Error("No recommendation generated by Grok API");
    }

    // Remove any hashtags that might still appear
    let recommendation = content
      .replace(/#\w+/g, "")
      .replace(/\s+/g, " ")
      .trim();

    // Remove any "Shop at:" Target links that might have been added
    recommendation = recommendation.replace(/Shop at:\s*https:\/\/www\.target\.com[^\s]*/gi, "").trim();
    
    // Remove any standalone Target.com links (but keep the X post link)
    recommendation = recommendation.replace(/https:\/\/www\.target\.com[^\s]*/gi, "").trim();

    return recommendation;
  } catch (error) {
    console.error("Grok API error:", error);
    throw new Error("Failed to generate recommendation");
  }
}
